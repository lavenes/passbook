// Version: 1.0.0
type AssocList<K, V> = List<(K, V)>;
type AssocList__1<K, V> = AssocList<K, V>;
type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type Hash = Nat32;
type Key<K> = {hash : Hash; key : K};
type Leaf<K, V> = {keyvals : AssocList__1<Key<K>, V>; size : Nat};
type List<T> = ?(T, List<T>);
type Set<T> = Trie<T, ()>;
type Trie<K, V> = {#branch : Branch<K, V>; #empty; #leaf : Leaf<K, V>};
type UserInfo =
  {
    var allowedBy : Set<Principal>;
    var allowedTokens : Set<Nat>;
    var dateOfBirth : Text;
    var firstName : Text;
    var lastName : Text;
    var liveIn : Text;
    var operators : Set<Principal>;
    var phone : Text;
    var sex : Nat;
    var tokens : Set<Nat>
  };
type UserInfo__1 = UserInfo;
actor {
  stable var usersEntries : [(Principal, UserInfo__1)]
};
