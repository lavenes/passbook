type UserInfoExt = 
 record {
   avatar: text;
   background: text;
   dateOfBirth: text;
   firstName: text;
   id: principal;
   lastName: text;
   liveIn: text;
   phone: text;
   sex: nat;
 };
type TokenPreorderListExt = 
 record {
   available: bool;
   id: text;
   nftId: text;
   owner: principal;
   supplies: nat;
 };
type TokenPreorder = 
 record {
   cashback: float64;
   end: text;
   endTime: text;
   gifts: vec TokenGiftInfo;
   preorder: bool;
 };
type TokenInfoExt = 
 record {
   category: text;
   checkin: bool;
   createdBy: principal;
   date: text;
   dateCreated: text;
   description: text;
   details: text;
   gifts: vec TokenGiftInfo;
   id: text;
   image: text;
   name: text;
   nftType: text;
   owner: principal;
   place: text;
   preorder: TokenPreorder;
   price: float64;
   privacy: text;
   supplies: nat;
   time: text;
 };
type TokenGiftInfo = 
 record {
   createdBy: principal;
   description: text;
   id: text;
   image: text;
   name: text;
   price: nat;
 };
type SaleEventExt = 
 record {
   end: text;
   id: text;
   nftId: text;
   owner: principal;
   priceSale: nat;
   start: text;
   supplies: nat;
 };
type PBCTokenExt = 
 record {
   balance: float64;
   user: principal;
 };
type NFTSale = 
 service {
   balanceOf: (principal) -> (float64);
   burnNFT: (text) -> (text);
   burnToken: (principal, float64) -> (float64);
   checkinTicket: (text, principal) -> (text);
   clearAllTokens: () -> () oneway;
   createAccount: (UserInfoExt) -> (text);
   createSaleEvent: (SaleEventExt) -> (SaleEventExt);
   deleteAccount: (principal) -> (bool);
   getAllSaleEvents: () -> (vec SaleEventExt);
   getAllTokenPreorders: () -> (vec TokenPreorderListExt) query;
   getAllTokens: () -> (vec TokenInfoExt) query;
   getSaleEvent: (text) -> (SaleEventExt);
   getTokenInfo: (text) -> (TokenInfoExt) query;
   getUserInfo: (principal) -> (opt UserInfoExt) query;
   mintCloneNFT: (text, text, principal) -> (TokenInfoExt);
   mintNFT: (TokenInfoExt) -> (TokenInfoExt);
   mintToken: (principal, float64) -> (PBCTokenExt);
   purchaseNFT: (text, nat, text) -> (text);
   readAccount: () -> (vec UserInfoExt) query;
   removeTokenPreorder: (text) -> (text) query;
   sendCashbacks: () -> ();
   swapNFT: (text, text) -> (text);
   transferNFT: (principal, principal, text, nat) -> (text);
   transferTokenFrom: (principal, principal, float64) -> (text);
   updateNFT: (TokenInfoExt) -> (TokenInfoExt);
 };
service : (principal) -> NFTSale
