type UserInfoExt = 
 record {
   dateOfBirth: text;
   firstName: text;
   id: principal;
   lastName: text;
   liveIn: text;
   permission: nat;
   phone: text;
   sex: nat;
 };
type User = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type TxReceipt = 
 variant {
   Err:
    variant {
      AmountTooSmall;
      BlockUsed;
      ErrorOperationStyle;
      ErrorTo;
      InsufficientAllowance;
      InsufficientBalance;
      LedgerTrap;
      Other: text;
      Unauthorized;
    };
   Ok: nat;
 };
type TokenInfoExt = 
 record {
   category: text;
   createdBy: principal;
   date: text;
   dateCreated: text;
   description: text;
   details: text;
   gifts: vec TokenGiftInfo;
   id: text;
   image: text;
   name: text;
   nftType: text;
   owner: principal;
   place: text;
   price: nat;
   time: text;
 };
type TokenIndex = nat32;
type TokenGiftInfo = 
 record {
   createdBy: principal;
   description: text;
   id: text;
   image: text;
   name: text;
   price: nat;
 };
type MintRequest = 
 record {
   metadata: opt blob;
   to: User;
 };
type AccountIdentifier = text;
service : {
  balanceOf: (principal) -> (nat);
  burnToken: (nat) -> (TxReceipt);
  checkinTicket: (text, principal) -> (text);
  clearAllTokens: () -> () oneway;
  createAccount: (text, text, nat, text, text, text) -> (UserInfoExt);
  deleteAccount: (principal) -> (bool);
  getAllTokens: () -> (vec TokenInfoExt) query;
  getTokenInfo: (text) -> (TokenInfoExt) query;
  getUserInfo: (principal) -> (opt UserInfoExt) query;
  logoToken: () -> (text) query;
  mintCloneNFT: (text, text) -> (TokenInfoExt);
  mintNFT: (MintRequest) -> (TokenIndex);
  mintToken: (principal, nat) -> (TxReceipt);
  nameToken: () -> (text) query;
  readAccount: () -> (vec UserInfoExt) query;
  symbolToken: () -> (text) query;
  transferToken: (principal, nat) -> (TxReceipt);
  transferTokenFrom: (principal, principal, nat) -> (TxReceipt);
  updateAccount: (principal, text, text, nat, text, text, text, nat) ->
   (UserInfoExt);
}
